SEARCH(FindText, WithinText, [StartPosition], [NotFoundValue])
Returns the starting position of one text string within another text string. SEARCH is not case-sensitive.
always give the notfound value.

TOPN(N_Value, Table, [OrderBy_Expression1], [Order1], ...)
Returns a given number of top rows according to a specified expression.

MID(Text, StartPosition, NumberOfCharacters)
Returns a string of characters from the middle of a text string, given a starting position and length.


EVALUATE
    FILTER(
        'public customer',
        'public customer'[first_name]="erica"  // case insensitive
    )

for sensitive use

EVALUATE
    FILTER(
        'public customer',
        EXACT('public customer'[first_name], "erica")
    )


EVALUATE
ROW("count",
    CALCULATE(
        COUNTROWS('public payment'),
        'public payment'[payment_date] >= DATE(2020, 1, 26),
        'public payment'[payment_date] <= DATE(2020, 1, 27) + TIME(23, 59, 0),
        'public payment'[amount] >= 1.99,
        'public payment'[amount] <= 3.99
    )
)


-------------contains-----------

CONTAINS(
    'public film',
    'public film'[description], "Documentary"
)

this returns a true or false (singley)

-----------------SERACH-----------------


SEARCH(FindText, WithinText, [StartPosition], [NotFoundValue])

EVALUATE
    ROW(
        "counter",
        CALCULATE(
            COUNTROWS('public film'),
            SEARCH(
                "Documentary",
                'public film'[description],
                1,
                0
            ) > 0
        )
    )


EVALUATE
    ROW(
        "count",
        CALCULATE(
            COUNTROWS(
                'public customer'
            ),
            LEN('public customer'[first_name])=3,
            EXACT("X",RIGHT('public customer'[last_name],1)) || EXACT("Y",RIGHT('public customer'[last_name],1))
        )
    )


EVALUATE
    ROW(
        "sum",
        SUM('public film'[replacement_cost]),
        "average",
        ROUND(AVERAGE('public film'[replacement_cost]),1),
        "max",
        MAX('public film'[replacement_cost]),
        "min",
        MIN('public film'[replacement_cost])

    )

EVALUATE
    SUMMARIZECOLUMNS(
        'public payment'[customer_id],
        'public payment',
        "sum",
        sum('public payment'[amount]),
        "mean",
        AVERAGE('public payment'[amount])
    )
    ORDER BY [sum] DESC

EVALUATE
SUMMARIZE(
    ADDCOLUMNS(FILTER('public payment', 'public payment'[amount] <> 0),"datey",DATE(YEAR('public payment'[payment_date]), MONTH('public payment'[payment_date]), DAY('public payment'[payment_date]))),
    'public payment'[staff_id],
    [datey],
    "count",
    COUNTROWS('public payment')
)
ORDER BY [count] DESC


EVALUATE
VAR ey=
SUMMARIZE(
    ADDCOLUMNS(
        FILTER(
        'public payment',
        DATEVALUE('public payment'[payment_date]) in {DATE(2020,04,28),DATE(2020,04,29),DATE(2020,04,30)}
        ),
        "datey",DATEVALUE('public payment'[payment_date])),
        'public payment'[customer_id],
        [datey],
        "average",AVERAGE('public payment'[amount]),
        "count",COUNTROWS('public payment')
    )

RETURN
FILTER(ey,[count]>1)
ORDER BY [average] DESC


EVALUATE
    SELECTCOLUMNS(
        FILTER(
            'public customer',
            LEN('public customer'[first_name])>10 || LEN('public customer'[last_name])>10
        ),
        "lower_first_name",LOWER('public customer'[first_name]),
        "lower_last_name",LOWER('public customer'[last_name])

    )
    

EVALUATE
    ADDCOLUMNS('public customer',"er",
    left('public customer'[first_name],1) & "." &left('public customer'[last_name],1))



EVALUATE
    SELECTCOLUMNS(
        'public customer',
        "tet",
        'public customer'[last_name] & " " & (LEFT('public customer'[email],SEARCH(".",'public customer'[email],1,0)-1))
    )


EVALUATE
ADDCOLUMNS (
    'public customer',
    "MaskedEmail",
    VAR email     = 'public customer'[email]
    VAR firstChar = LEFT(email, 1)
    VAR dotPos    = SEARCH(".", email, 1, -1)
    VAR dotPart   = IF(dotPos = -1, "", MID(email, dotPos, 2))
    VAR atPos     = SEARCH("@", email, 1, -1)
    VAR domain    = IF(atPos = -1, "", MID(email, atPos, LEN(email)))
    RETURN
        firstChar & "***" & dotPart & "***" & domain
)


EVALUATE
    ADDCOLUMNS(
        'bookings flights',
        "er",
        if(
            ISBLANK('bookings flights'[actual_departure]),"no departure",
            if(
             ('bookings flights'[actual_departure]-'bookings flights'[scheduled_departure])<TIME(0,5,0),"one time","no")
            )
        )


DEFINE
var tb= NATURALINNERJOIN(
    ADDCOLUMNS(
        'bookings boarding_passes',
        "seat_no1", FORMAT('bookings boarding_passes'[seat_no], "")
    ),
    ADDCOLUMNS(
        'bookings seats',
        "seat_no1", FORMAT('bookings seats'[seat_no], "")
    )
)

EVALUATE
    SUMMARIZE(
        tb,
        'bookings seats'[fare_conditions],
        "count",
        COUNTROWS(
            FILTER(
                tb,
                'bookings seats'[fare_conditions]=EARLIER('bookings seats'[fare_conditions])
            )
        )
    )


